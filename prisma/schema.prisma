generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// datasource db2 {
//  provider          = "postgresql"
//  url               = env("DATABASE_URL")
//  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_ROSE_URL")
// }

model OrderStatus {
  id          String    @id @default(cuid()) @map("_id")
  orderedAt   DateTime  @default(now())
  acceptedAt  DateTime?
  placedAt    DateTime?
  pickedUpAt  DateTime?
  deliveredAt DateTime?
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id])
}

model Order {
  id              String        @id @default(cuid()) @map("_id")
  userId          String
  locationId      String
  price           Int           @default(5)
  destinationDorm String
  destinationRoom String
  phone           String
  paid            Boolean       @default(false)
  dasherId        String?
  isActive        Boolean?       @default(false)
  isActiveTest    Boolean?       @default(false)
  dasher          User?         @relation("DasherToOrder", fields: [dasherId], references: [id])
  location        Location      @relation(fields: [locationId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  OrderStatus     OrderStatus[]
  items           Item[]        @relation("ItemToOrder")
}

model Location {
  id     String  @id @default(cuid()) @map("_id")
  name   String  @unique
  image  String?
  items  Item[]
  orders Order[]
}

model Item {
  id         String   @id @default(cuid()) @map("_id")
  name       String   @unique
  locationId String
  image      String?
  price      Int      @default(5)
  featured   Boolean  @default(false)
  location   Location @relation(fields: [locationId], references: [id])
  orders     Order[]  @relation("ItemToOrder")
}

model Application {
  id         String   @id @default(cuid()) @map("_id")
	userId     String 
	user       User     @relation(fields: [userId], references: [id], "ApplicationtoUser")
  createdAt  DateTime @default(now())
	active 		 Boolean  @default(true)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  token_type        String
  provider          String
  scope             String
  providerAccountId String
  refreshToken      String?
  access_token      String?
  expires_at        Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  id_token          String?
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  isDasher            Boolean   @default(false)
  dasherNotifications Boolean   @default(false)
  isAdmin             Boolean   @default(false)
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  password            String?
  dorm                String?
  phone               String?   @unique
  roomNumber          String?
  venmo               String?
  accounts            Account[]
  dashedOrders        Order[]   @relation("DasherToOrder")
  applications        Application[]   @relation("ApplicationtoUser")
  orders              Order[]
  reports             Report[]
  sessions            Session[]
	year                String?
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Report {
  id         String   @id @default(cuid()) @map("_id")
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isResolved Boolean  @default(false)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}
